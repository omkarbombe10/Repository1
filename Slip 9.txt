4. Write angular JS by using ng-click directive to display an alert message after clicking
the element.
Ans-
<!DOCTYPE html>
<html ng-app="myApp">
<head>
<title>ng-click Example</title>
<script src="angular.min.js"></script>
</head>
<body ng-controller="myController">
<button ng-click="showAlert()">Click Me</button>
<script>
var app = angular.module('myApp', []);
app.controller('myController', function($scope) {
$scope.showAlert = function() {
alert("Hello! You clicked the button.");
};
});
</script>
</body>
</html>









Q2) Create a nodejs program to build your own module for reverse numbers and check number is palindrome or not. Use export statement and create a simple web server and display the result through module.

number.js
function reverseNumber(num) {
return parseInt(num.toString().split('').reverse().join(''));
}
function isPalindrome(num) {
return num === reverseNumber(num);
}
module.exports = {
reverseNumber,
isPalindrome
};

Server.js
const http = require('http');
const url = require('url');
const { reverseNumber, isPalindrome } = require('./number');

const server = http.createServer((req, res) => {
const queryObject = url.parse(req.url, true).query;
const num = parseInt(queryObject.num);

res.writeHead(200, { 'Content-Type': 'text/html' });

if (!isNaN(num)) {
const reversed = reverseNumber(num);
const palindrome = isPalindrome(num);

res.write(`<h2>Original Number: ${num}</h2>`);
res.write(`<h2>Reversed Number: ${reversed}</h2>`);
res.write(`<h2>Is Palindrome: ${palindrome ? 'Yes' : 'No'}</h2>`);
} else {
res.write('<h2>Please provide a valid number as query parameter like ?num=121</h2>');
}
res.end();
});
server.listen(3000, () => {
console.log('Server running at http://localhost:3000');
});
http://localhost:3000/?num=121


